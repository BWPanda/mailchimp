<?php

/**
 * @file
 * Mailchimp module.
 */

define('MAILCHIMP_LISTTYPE_REQUIRED', 'required');
define('MAILCHIMP_LISTTYPE_OPTIN', 'optin');
define('MAILCHIMP_LISTTYPE_OPTOUT', 'optout');
define('MAILCHIMP_USERSTATUS_PENDING', 'pending');
define('MAILCHIMP_USERSTATUS_CURRENT', 'current');


/**
 * Implements hook_menu().
 */
function mailchimp_menu() {
  $items = array();

  $items['mailchimp/subscribe'] = array(
      'page callback' => 'mailchimp_subscribe_page',
      'title' => 'Newsletter Subscription',
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access content'),
  );
  $items['mailchimp/unsubscribe'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailchimp_unsubscribe_form'),
      'title' => 'Newsletter Unsubscribe',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['mailchimp/unsubscribe/success'] = array(
      'page callback' => 'mailchimp_unsubscribe_success',
      'title' => 'Unsubscription Confirmed',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['mailchimp/unsubscribe/failure'] = array(
      'page callback' => 'mailchimp_unsubscribe_failure',
      'title' => 'Unsubscription Failed',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['admin/config/services/mailchimp'] = array(
      'title' => 'MailChimp',
      'description' => 'Manage MailChimp Settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailchimp_admin_settings'),
      'access arguments' => array('administer mailchimp'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/mailchimp.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mailchimp_permission() {
  return array(
    'administer mailchimp' => array(
      'title' => t('administer mailchimp'),
      'description' => t('TODO Add a description for administer mailchimp'),
    ),
  );
}

/**
 * Return all available MC lists a given user can subscribe to
 *
 * @global <type> $user
 * @return <type> page content of all available MC lists for a given user
 */
function mailchimp_subscribe_page() {
  global $user;
  $ret = '';
  if ($user->uid) {
    $ret = drupal_get_form('mailchimp_subscribe_auth_form', $user);
  }
  elseif ($q = _mailchimp_get_api_object()) {
    $ret = drupal_get_form('mailchimp_subscribe_anon_form_all', $q);
  }
  return $ret;
}

/**
 * Return a form for all available MC lists
 *
 * @param <type> $form_state
 * @param <type> $list MC list object
 * @param <type> $q MC object
 * @return <type> form array
 */
function mailchimp_subscribe_anon_form_all($form, $form_state, $q) {
  $form = array('#tree' => TRUE);
  global $user;

  $lists =_mailchimp_get_available_lists($user);
  foreach ($lists as $list) {
    $form['mailchimp_lists'][$list->id] = array(
      '#type' => 'fieldset',
      '#title' => t('@name', array('@name' => $list->name)),
      '#description' => t('@desc', array('@desc' => $list->description)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    _mailchimp_subscribe_anon_form($list, $q, $form['mailchimp_lists'][$list->id]);

    // for anonymous sign up forms, we want to force email to be optional
    if ($form['mailchimp_lists'][$list->id]['EMAIL']) {
      $form['mailchimp_lists'][$list->id]['EMAIL']['#required'] = FALSE;
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up!'),
    '#weight' => 100
  );

  $form['#submit'][] = 'mailchimp_subscribe_anon_form_submit';

  return $form;
}

/**
 * Submit handler for anonymous subscription form
 *
 * @param <type> $form_state
 * @param <type> $q - MC API object
 */
function mailchimp_subscribe_anon_form_submit($form, &$form_state) {
  $lists = $form_state['values']['mailchimp_lists'];
  foreach ($lists as $list) {
    if (!empty($list['EMAIL'])) {
      $success = FALSE;
      // filter our interest groups and return in an comma delimited string
      if (!empty($values['INTERESTS'])) {
        $list['INTERESTS'] = implode(',', array_filter($list['INTERESTS']));
      }

      $success = _mailchimp_subscribe_user($list['list'], $list['EMAIL'], $list, TRUE);

      if ($success) {
        $msg = variable_get('mailchimp_subscription_success_message', t('Thank you, you have been successfully subscribed.'));
      }
      else {
        $msg = variable_get('mailchimp_subscription_failure_message', t('We were unable to subscribe you at this time. Please try again later.'));
      }

      drupal_set_message($msg);
    }
  }
}

/**
 * Return a form for a given MC list
 *
 * @param <type> $form_state
 * @param <type> $list MC list object
 * @param <type> $q MC object
 * @return <type> form array
 */
function mailchimp_subscribe_anon_form($form, $form_state, $list, $q) {
  $form += array(
    '#tree' => TRUE,
    '#id' => 'mailchimp_subscribe_anon_form_' . $list->id
  );

  $form['description'] = array(
    '#value' => $list->description
  );

  _mailchimp_subscribe_anon_form($list, $q, $form['mailchimp_lists'][$list->id]);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up!'),
    '#weight' => 100
  );

  return $form;
}

/**
 * Helper function to return form elements for a single anon newsletter
 *
 * @param string $list
 * @param string $q
 * @param string $form
 * @return void
 */
function _mailchimp_subscribe_anon_form($list, $q, &$form) {
  $form['list'] = array(
      '#type'   => 'value',
      '#value'  => $list
  );

  // grab any default values for authenticated users
  global $user;
  $mergevalues = NULL;
  if ($user->uid) {
    $mergevalues = _mailchimp_load_user_list_mergevars($user->uid, $list->id, $q->listMergeVars($list->id));
  }

  foreach ((array) $q->listMergeVars($list->id) as $mergevar) {
    // set the default value for merge fields if we have it
    if ($mergevalues && isset($mergevalues[$mergevar['tag']]) && $mergevalues[$mergevar['tag']]) {
      $mergevar['default'] = $mergevalues[$mergevar['tag']];
    }
    $form[$mergevar['tag']] = _mailchimp_insert_drupal_form_tag($mergevar);
  }

  // present interest groups
  if ($intgroup = $q->listInterestGroups($list->id)) {
    switch ($intgroup['form_field']) {
      case 'radio':
        $field_type = 'radios';
        break;
      case 'checkbox':
        $field_type = 'checkboxes';
        break;
      default:
        $field_type = $intgroup['form_field'];
    }
    foreach ((array) $intgroup['groups'] as $group) {
      $options[$group] = $group;
    }
    $form['INTERESTS'] = array(
      '#type'           => $field_type,
      '#title'          => $intgroup['name'],
      '#options'        => $options
    );
  }
}

/**
 * Convert mailchimp form elements to Drupal Form API
 *
 * @param <type> $mergevar
 * @return <type>
 */
function _mailchimp_insert_drupal_form_tag($mergevar) {
  // Insert common FormAPI properties
  $input = array(
      '#title' => $mergevar['name'],
      '#weight' => $mergevar['order'],
      '#required' => $mergevar['req'],
      '#default_value' => $mergevar['default']
  );

  switch ($mergevar['field_type']) {
    case 'dropdown':
      // dropdown is mapped to <select> element in Drupal Form API
      $input['#type'] = 'select';

      // Creates options, we must delete array keys to have revealant information
      // on MailChimp
      foreach ($mergevar['choices'] as $choice) {
        $choices[$choice] = $choice;
      }

      $input['#options'] = $choices;
      break;
    case 'radio':
      // radio is mapped to <input type='radio' /> i.e. 'radios' element in Drupal Form API
      $input['#type'] = 'radios';

      // Creates options, we must delete array keys to have revealant information
      // on MailChimp
      foreach ($mergevar['choices'] as $choice) {
        $choices[$choice] = $choice;
      }

      $input['#options'] = $choices;
      break;

    default:
      // This is a standard input[type=text] or something we can't handle with Drupal FormAPI
      $input['#type'] = 'textfield';
      $input['#size'] = $mergevar['size'];
      break;
  }

  // Special cases for MailChimp hidden defined fields
  if ($mergevar['public'] == FALSE) {
    $input['#type'] = 'hidden';
  }

  return $input;
}

/**
 * MailChimp unsubscribe form
 *
 * @param <type> $form_values
 * @return <type>
 */
function mailchimp_unsubscribe_form($form, $form_state) {
  $form = array();
  $form['intro'] = array(
      '#type'           => 'markup',
      '#value'          => t('Use this form to unsubscribe from all of our newsletters.'),
  );

  $form['EMAIL'] = array(
      '#type'           => 'textfield',
      '#title'          => t('Email Address'),
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Unsubscribe'),
  );
  return $form;
}

/**
 * submit handler for unsubscribe form
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function mailchimp_unsubscribe_form_submit($form, &$form_state) {
  if ($q || $q = _mailchimp_get_api_object()) {
    $success = TRUE;
    foreach ((array) $q->lists() as $list) {
      $success = $success && _mailchimp_unsubscribe_user($list, $form_state['values']['EMAIL'], TRUE, $q);
      if ($success) {
        drupal_set_message(variable_get('mailchimp_unsubscription_success_message', t('Thank you, you have been successfully unsubscribed.')));
      }
      else {
        drupal_set_message(variable_get('mailchimp_unsubscription_failure_message', t('We were unable to unsubscribe you at this time. Please try again later.')));
      }
    }
  }
}

/**
 * validate unsubscribe form
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function mailchimp_unsubscribe_form_validate($form, &$form_state) {
  if (!$form_state['values']['EMAIL']) {
    form_set_error('EMAIL', t('Please enter your email address.'));
  }
  else {
    if ($q || $q = _mailchimp_get_api_object()) {
      $subscribed = FALSE;
      foreach ((array) $q->lists() as $list) {
        $subscribed = $subscribed || _mailchimp_is_subscribed($list['id'], $form_state['values']['EMAIL'], $q);
      }
      if (!$subscribed) {
        form_set_error('', t('That email address could not be found.'));
      }
    }
    else {
      form_set_error('', t('There was an error processing your request. Please try again later.'));
    }
  }
}

/**
 * Recursive implode
 * @param string $glue
 * @param array $pieces
 * @return string
 */
function implode_recursive($glue, $pieces) {
  foreach ($pieces as $piece) {
    if (is_array($piece)) {
      $retVal[] = implode_recursive($glue, $piece);
    } else {
      $retVal[] = $piece;
    }
  }
  return implode($glue, $retVal);
}

/**
 * Get the available merge var keys
 */
function mailchimp_get_merge_keys() {
  return module_invoke_all('mailchimp_merge_keys');
}

/**
 * Check if the given user is subscribed to the given list.
 */
function mailchimp_is_subscribed($listid, $mail, $q = NULL) {
  $is_subscribed = FALSE;
  if ($q || $q = _mailchimp_get_api_object()) {
    $sub_info       = $q->listMemberInfo($listid, $mail);
    $is_subscribed  = @$sub_info['status'] == 'subscribed';
  }
  return $is_subscribed;
}

/**
 * Subscribe or update a user in a givne list.
 */
function mailchimp_subscribe_user($list, $email, $merge_vars, $message = TRUE, $q = NULL) {
  if ($q || $q = _mailchimp_get_api_object()) {
    $double_optin   = $list->doublein;

    // required by MC API. An empty array will fail.
    if (empty($merge_vars)) {
      $merge_vars = '';
    }

    if (_mailchimp_is_subscribed($list->id, $email, $q)) {
      $action = 'updated in';
      $success = $q->listUpdateMember($list->id, $email, $merge_vars);
      if ($success && $message) {
        drupal_set_message(t('You have updated your settings in %list.', array('%list' => $list->name)));
      }
    }
    else {
      $action = 'subscribed to';
      $success = $q->listSubscribe($list->id, $email, $merge_vars, 'html', $double_optin, TRUE);

      if ($message && $success && $double_optin) {
        drupal_set_message(t('You have chosen to subscribe to %list. An email will be sent to your address. Click the link in the email to confirm the subscription.', array('%list' => $list->name)));
      }
      elseif ($message && $success) {
        drupal_set_message(t('You have subscribed to %list.', array('%list' => $list->name)));
      }
    }
  }

  if ($success) {
    watchdog('mailchimp', '@email was @action list @list.',
      array('@action' => $action, '@email' => $merge_vars['EMAIL'], '@list' => $list->name), WATCHDOG_NOTICE);
  }
  else {
    watchdog('mailchimp', 'A problem occurred subscribing @email to list @list. Message: @msg', array(
      '@email' => $merge_vars['EMAIL'], 
      '@list' => $list->name,
      '@msg' => $q->errorMessage), WATCHDOG_WARNING);
  }

  return $success;
}

/**
 * Unsubscribe the given user from the given list.
 */
function mailchimp_unsubscribe_user($list, $mail, $message = TRUE, $q = NULL) {
  if ($q || $q = _mailchimp_get_api_object()) {
    if (_mailchimp_is_subscribed($list->id, $mail, $q)) {
      $success = $q->listUnsubscribe($list->id, $mail, FALSE, FALSE, FALSE);
      if ($message && $success) {
        drupal_set_message(t('You have unsubscribed from %list.', array('%list' => $list->name)));
      }
    }
  }
  return TRUE; //$success; // the mailchim api seems to always return FALSE on unsubscribe operations
}

/**
 * Get all of the lists that the given user can subscribe to.
 */
function mailchimp_get_available_lists($user) {
  $all_lists = variable_get('mailchimp_lists', array());
  $available_lists = array();
  if (!empty($all_lists)) {
    $all_lists = unserialize($all_lists);
    foreach ($all_lists as $key => $list) {
      foreach ($user->roles as $rid => $info) {
        if (!empty($list->roles[$rid])) {
          $available_lists[$list->id] = $list;
          break;
        }
      }
    }
  }

  return $available_lists;
}

/**
 * Get all of the lists that the given user must be subscribed to.
 */
function mailchimp_get_required_lists() {
  $data = variable_get('mailchimp_lists', NULL);
  $lists = array();
  if (!empty($data)) {
    $lists = unserialize($data);
    foreach ($lists as $key => $list) {
      if ($list->listtype !== MAILCHIMP_LISTTYPE_REQUIRED) {
        unset($lists[$key]);
      }
    }
  }
  return $lists;
}

/**
 * Get a Mailchimp API object for communication with the mailchimp server.
 */
function mailchimp_get_api_object() {
  module_load_include('php', 'mailchimp', 'MCAPI.class');

  $q = new MCAPI(variable_get('mailchimp_api_key', ''));
  
  // set the timeout to something reasonsable to avoid taking down the Drupal site
  $q->setTimeout(60);

  if ($q->errorCode) {
    watchdog('mailchimp', $q->errorMessage, NULL, WATCHDOG_ERROR);
    return NULL;
  }
  
  return $q;
}

/**
 * Implements hook_block_info.
 */
function mailchimp_block_info() {
  $blocks = array();
  $all_lists = variable_get('mailchimp_lists', array());
  if (!empty($all_lists)) {
    $all_lists = unserialize($all_lists);
    foreach ($all_lists as $key => $list) {
      // exclude required lists
      if ($list->listtype !== MAILCHIMP_LISTTYPE_REQUIRED) {
        $blocks[$list->id]["info"] = t('Mailchimp Subscription Form: @name', array('@name' => $list->name));
      }
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 * Provides a block for each available list for a given user
 */
function mailchimp_block_view($delta = '') {
  global $user;
  $lists = _mailchimp_get_available_lists($user);
  $list = $lists[$delta];
  if (!empty($list) && $q = _mailchimp_get_api_object()) {
    $block['subject'] = t('Subscribe to @title', array('@title' => $list->name));
    $block['content'] = drupal_get_form('mailchimp_subscribe_anon_form', $list, $q);
  }
  return $block;
}