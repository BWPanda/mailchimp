<?php

/**
 * @file
 * Mailchimp module.
 */

/**
 * Implements hook_libraries_info().
 */
function mailchimp_libraries_info() {
  $libraries['mailchimp'] = array(
    'name' => 'MailChimp MCAPI',
    'vendor url' => 'http://apidocs.mailchimp.com/api/2.0',
    'download url' => 'https://bitbucket.org/mailchimp/mailchimp-api-php/get/2.0.4.zip',
    'path' => 'src',
    'version arguments' => array(
      'file' => 'composer.json',
      // Version 2.0.4
      'pattern' => '/\"version": \"((\d+)\.(\d+)\.(\d+))\",/',
    ),
    'files' => array(
      'php' => array('Mailchimp.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function mailchimp_menu() {
  $items = array();

  $items['admin/config/services/mailchimp'] = array(
    'title' => 'MailChimp',
    'description' => 'Manage MailChimp Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_admin_settings'),
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/mailchimp/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
  $items['mailchimp/webhook'] = array(
    'title' => 'MailChimp webhooks endpoint',
    'page callback' => 'mailchimp_process_webhook',
    'access callback' => 'mailchimp_process_webhook_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mailchimp_permission() {
  return array(
    'administer mailchimp' => array(
      'title' => t('administer mailchimp'),
      'description' => t('Access the mailchimp configuration options.'),
    ),
  );
}

/**
 * Get a Mailchimp API object for communication with the mailchimp server.
 */
function mailchimp_get_api_object() {
  $library = libraries_load('mailchimp');
  if (!$library['installed']) {
    $msg = 'Failed to load MailChimp PHP library. Please refer to the installation requirements.';
    watchdog('mailchimp', $msg, WATCHDOG_ERROR);
    drupal_set_message(t($msg), 'error');
    return NULL;
  }

  $api_key = variable_get('mailchimp_api_key', '');
  if (!strlen($api_key)) {
    watchdog('mailchimp', t('Mailchimp Error: API Key cannot be blank.'), WATCHDOG_ERROR);
    return NULL;
  }
  // Set the timeout to something that won't take down the Drupal site:
  $options = array('timeout' => 60);
  
  // We allow the class name to be overridden, following the example of core's
  // mailsystem, in order to use alternate MailChimp classes. The bundled tests
  // use this approach to extend the MailChimp class with a test server.
  // @ todo switch over to DrupalMailchimp (and override http sends)
  $classname = variable_get('mailchimp_api_classname', 'Mailchimp');
  $mailchimp = new $classname($api_key, $options);
  // @todo catch creation error and do something sensible.
  return $mailchimp;
}

/**
 * Wrapper around mailchimp_get_lists() to return a single list.
 *
 * @param string $list_id
 *   The unique ID of the list provided by MailChimp.
 *
 * @return array
 *   A list array formatted as indicated in the MailChimp API documentation.
 */
function mailchimp_get_list($list_id) {
  $lists = mailchimp_get_lists(array($list_id));
  return reset($lists);
}

/**
 * Return all MailChimp lists for a given key. Lists are stored in the cache.
 *
 * @param array $list_ids
 *   An array of list IDs to filter the results by.
 * @param bool $reset
 *   Force a cache reset.
 *
 * @return array
 *   An array of list arrays.
 */
function mailchimp_get_lists($list_ids = array(), $reset = FALSE) {
  $cache = $reset ? NULL : cache_get('mailchimp_lists', 'cache_mailchimp');
  $lists = array();
  // Return cached lists:
  if ($cache) {
    $lists = $cache->data;
  }
  // Query lists from the MCAPI and store in cache:
  else {
    try {
      if ($q = mailchimp_get_api_object()) {
        $result = $q->lists->getList(array(), 0, 100);
        if ($result['total'] > 0) {
          foreach ($result['data'] as $list) {
            if ($list['stats']['group_count']) {
              // Append interest groups:
              $list['intgroups'] = $q->lists->interestGroupings($list['id']);
            }
            $lists[$list['id']] = $list;
          }
          // Append mergefields:
          $mergevar_settings = $q->lists->mergeVars($list_ids);
          foreach($mergevar_settings['data'] as $mergevars) {
            $lists[$mergevars['id']]['mergevars'] = $mergevars['merge_vars'];
          }
        }
      }
      uasort($lists, '_mailchimp_list_cmp');
      cache_set('mailchimp_lists', $lists, 'cache_mailchimp', CACHE_TEMPORARY);
    }
    catch (Exception $e) {
      watchdog('mailchimp', 'An error occurred requesting list information from Mailchimp. "%message"', array(
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
    }
  }
  // Filter by given ids:
  if (!empty($list_ids)) {
    $filtered_lists = array();
    foreach ($list_ids as $id) {
      if (array_key_exists($id, $lists)) {
        $filtered_lists[$id] = $lists[$id];
      }
    }
    return $filtered_lists;
  }
  else {
    return $lists;
  }
}

/**
 * Helper function used by uasort() to sort lists alphabetically by name.
 *
 * @param array $a
 *   An array representing the first list.
 * @param array $b
 *   An array representing the second list.
 *
 * @return int
 *   One of the values -1, 0, 1
 */
function _mailchimp_list_cmp($a, $b) {
  if ($a['name'] == $b['name']) {
    return 0;
  }
  return ($a['name'] < $b['name']) ? -1 : 1;
}

/**
 * Get the MailChimp memberinfo for a given email address and list.
 *
 * Results are cached in the cache_mailchimp bin which is cleared by the MC
 * web hooks system when needed.
 *
 * @string $list_id
 * @string $email
 * @bool $reset
 *
 * @return array
 *   memberinfo array, empty if there is no valid info.
 */
function mailchimp_get_memberinfo($list_id, $email, $reset = FALSE) {
  $cache = $reset ? NULL : cache_get($list_id . '-' . $email, 'cache_mailchimp');
  $memberinfo = array();

  // Return cached lists:
  if ($cache) {
    $memberinfo = $cache->data;
  }
  // Query lists from the MCAPI and store in cache:
  else {
    if ($q = mailchimp_get_api_object()) {
      try {
        $result = $q->lists->memberInfo($list_id, array(array('email' => $email)));
        if ($result['success_count']) {
          $memberinfo = reset($result['data']);
        }
      }
      catch (Exception $e) {
        watchdog('mailchimp', 'An error occurred requesting memberinfo for @email in list @list. "%message"', array(
          '@email' => $email,
          '@list' => $list_id,
          '%message' => $e->getMessage(),
        ), WATCHDOG_ERROR);        
      }
    }
    cache_set($list_id . '-' . $email, $memberinfo, 'cache_mailchimp', CACHE_PERMANENT);
  }

  return $memberinfo;
}

/**
 * Check if the given email is subscribed to the given list.
 *
 * Simple wrapper around mailchimp_get_memberinfo().
 *
 * @string  $list_id
 *   Unique string identifier for the list on your MailChimp account.
 * @string  $email
 *   Email address to check for on the identified Mailchimp List
 * @bool $reset
 *   Set to TRUE to ignore the cache. (Used heavily in testing functions.)
 *
 * @return bool
 *   Indicates subscription status.
 */
function mailchimp_is_subscribed($list_id, $email, $reset = FALSE) {
  $subscribed = FALSE;
  $memberinfo = mailchimp_get_memberinfo($list_id, $email, $reset);
  if (isset($memberinfo['status']) && $memberinfo['status'] == 'subscribed') {
    $subscribed = TRUE;
  }

  return $subscribed;
}

/**
 * Subscribe a user to a given list.
 */
function mailchimp_subscribe($list_id, $email, $merge_vars = NULL, $format = 'html', $double_optin = FALSE, $update_existing = FALSE, $replace_interests = TRUE, $confirm = TRUE, $mcapi = NULL) {
  $success = FALSE;
  if ($mcapi || $mcapi = mailchimp_get_api_object()) {
    try {
      $result = $mcapi->lists->subscribe($list_id, array('email' => $email), $merge_vars, $format, $double_optin, $update_existing, $replace_interests, $confirm);
      if (isset($result['email'])) {
        $success = $result;
        module_invoke_all('mailchimp_subscribe_user', $list_id, $email, $merge_vars);
        // Clear user cache, just in case there's some cruft leftover:
        mailchimp_cache_clear_user($list_id, $email);
        watchdog('mailchimp', '@email was subscribed to list @list.',
          array('@email' => $merge_vars['EMAIL'], '@list' => $list_id), WATCHDOG_NOTICE
        );
      }
      else {
        watchdog('mailchimp', 'A problem occurred subscribing @email to list @list.', array(
          '@email' => $email,
          '@list' => $list_id,
        ), WATCHDOG_WARNING);
      }
    }
    catch (Exception $e) {
      watchdog('mailchimp', 'An error occurred subscribing @email to list @list. "%message"', array(
        '@email' => $email,
        '@list' => $list_id,
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
    }
  }

  return $success;
}

/**
 * Update a user in a given list.
 */
function mailchimp_update_member($list_id, $email, $merge_vars, $format = '', $replace_interests = TRUE,  $mcapi = NULL) {
  $success = FALSE;
  if ($mcapi || $mcapi = mailchimp_get_api_object()) {
    try {
      $result = $mcapi->lists->updateMember($list_id, array('email' => $email), $merge_vars, $format, $replace_interests);
      if (isset($result['email'])) {
        $success = $result;
        watchdog('mailchimp', '@email was updated in list @list_id.', array(
            '@email' => $email,
            '@list' => $list_id,
        ), WATCHDOG_NOTICE);
        // Clear user cache:
        mailchimp_cache_clear_user($list_id, $email);
      }
      else {
        watchdog('mailchimp', 'A problem occurred updating @email on list @list.', array(
          '@email' => $email,
          '@list' => $list_id,
        ), WATCHDOG_WARNING);
      }
    }
    catch (Exception $e) {
      watchdog('mailchimp', 'An error occurred updating @email on list @list. "%message"', array(
        '@email' => $email,
        '@list' => $list_id,
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
    }
  }

  return $success;
}

/**
 * Unsubscribe a user from the given list.
 *
 * @string $list_id
 *   A mailchimp list id.
 * @string $email
 *   Email address to be unsubscribed.
 * @bool $delete
 *   Indicates whether an email should be deleted or just unsubscribed.
 * @bool $goodbye
 *   Indicates whether to send the goodbye email to the email address.
 * @bool $notify
 *   Indicates whether to send the unsubscribe notification email to the address
 *   defined in the list email notification settings.
 * @object $mcapi
 *   Mailchimp API object if one is already loaded.
 *
 * @return bool
 *   Indicates whether unsubscribe was successful.
 */
function mailchimp_unsubscribe($list_id, $email, $delete = FALSE, $goodbye = FALSE, $notify = FALSE, $mcapi = NULL) {
  $success = FALSE;
  if ($mcapi || $mcapi = mailchimp_get_api_object()) {
    if (mailchimp_is_subscribed($list_id, $email)) {
      try {
        $success = $mcapi->lists->unsubscribe($list_id, array('email' => $email), $delete, $goodbye, $notify);
        if ($success) {
          module_invoke_all('mailchimp_unsubscribe_user', $list_id, $email);
        }
        // Clear user cache:
        mailchimp_cache_clear_user($list_id, $email);
      }
      catch (Exception $e) {
        watchdog('mailchimp', 'An error occurred unsubscribing @email from list @list. "%message"', array(
          '@email' => $email,
          '@list' => $list_id,
          '%message' => $e->getMessage(),
        ), WATCHDOG_ERROR);
      }
    }
  }

  return $success;
}

/**
 * Wrapper around MCAPI->campaigns->getList to return data for a given campaign.
 *
 * Data is stored in the mailchimp cache.
 *
 * @string $campaign_id
 *
 * @return mixed
 *   Array of campaign data or FALSE if not found.
 */
function mailchimp_get_campaign_data($campaign_id, $reset = FALSE) {
  $cache = $reset ? NULL : cache_get('mailchimp_campaign_' . $campaign_id, 'cache_mailchimp');
  // Return cached lists:
  if ($cache) {
    $campaign_data = $cache->data;
  }
  else {
    $q = mailchimp_get_api_object();
    $filters = array(
      'campaign_id' => $campaign_id,
    );
    try {
      $results = $q->campaigns->getList($filters, 0, 1);
      if (isset($results['total']) && $results['total']) {
        $campaign_data = $results['data'][0];
        cache_set('mailchimp_campaign_' . $campaign_id, $campaign_data, 'cache_mailchimp', CACHE_TEMPORARY);
      }
      else {
        $campaign_data = FALSE;
      }
    }
    catch (Exception $e) {
      watchdog('mailchimp', 'An error occurred retreiving campaign data for @campaign. "%message"', array(
        '@campaign' => $campaign_id,
        '%message' => $e->getMessage(),
      ), WATCHDOG_ERROR);
    }
  }

  return $campaign_data;
}

/**
 * Wrapper around MCAPI->helper->campaignsForEmail().
 *
 * Returns all IDs of campaigns that have included a given email address.
 *
 * @string $email
 *
 * @return array
 *   Campaign structs containing id, title, subject, send_time, type.
 */
function mailchimp_get_campaigns_for_email($email) {
  $q = mailchimp_get_api_object();
  try {
    $campaign_list = $q->helper->campaignsForEmail(array('email' => $email));
  }
  catch (Exception $e) {
    watchdog('mailchimp', 'An error occurred retreiving campaign data for @email. "%message"', array(
      '@email' => $email,
      '%message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    $campaign_list = array();
  }
  return $campaign_list;
}

/**
 * Clear a mailchimp user memberinfo cache.
 *
 * @string $list_id
 * @string $email
 */
function mailchimp_cache_clear_user($list_id, $email) {
  cache_clear_all($list_id . '-' . $email, 'cache_mailchimp');
}

/**
 * Clear a mailchimp activity cache.
 *
 * @string $list_id
 */
function mailchimp_cache_clear_list_activity($list_id) {
  cache_clear_all('mailchimp_activity_' . $list_id, 'cache_mailchimp');
}

/**
 * Clear a mailchimp activity cache.
 *
 * @string $list_id
 */
function mailchimp_cache_clear_campaign($campaign_id) {
  cache_clear_all('mailchimp_campaign_' . $campaign_id, 'cache_mailchimp');
}

/**
 * Implements hook_flush_caches().
 */
function mailchimp_flush_caches() {
  return array('cache_mailchimp');
}

/**
 * Access callback for mailchimp_process_webhook().
 *
 * @string $key
 */
function mailchimp_process_webhook_access($key) {
  return $key == mailchimp_webhook_key();
}

/**
 * Process a webhook post from MailChimp.
 */
function mailchimp_process_webhook() {
  $data = $_POST['data'];
  $type = $_POST['type'];
  switch ($type) {
    case 'unsubscribe':
    case 'profile':
    case 'cleaned':
      mailchimp_get_memberinfo($data['list_id'], $data['email'], TRUE);
      break;

    case 'upemail':
      mailchimp_cache_clear_user($data['list_id'], $data['old_email']);
      mailchimp_get_memberinfo($data['list_id'], $data['new_email'], TRUE);
      break;

    case 'campaign':
      mailchimp_cache_clear_list_activity($data['list_id']);
      mailchimp_cache_clear_campaign($data['id']);
      break;
  }

  // Allow other modules to act on a webhook.
  module_invoke_all('mailchimp_process_webhook', $type, $data);

  // Log event:
  watchdog('mailchimp', 'Webhook type @type has been processed.',
    array('@type' => $type), WATCHDOG_INFO
  );
}

/**
 * Generate a key to include in the webhook url based on a hash.
 *
 * @string $list_id
 *
 * @return string
 *   The key.
 */
function mailchimp_webhook_key() {
  return drupal_hash_base64($GLOBALS['base_url'] . drupal_get_private_key() . drupal_get_hash_salt());
}

/**
 * Generate the webhook endpoint URL.
 *
 * @string $list_id
 *
 * @return string
 *   The endpoint URL.
 */
function mailchimp_webhook_url() {
  return $GLOBALS['base_url'] . '/mailchimp/webhook/' . mailchimp_webhook_key();
}

/**
 * Returns an array of lists that the user has been a member of.
 *
 * Includes a value indicating whether they are currently a subscribed or not.
 *
 * @string $email
 *
 * @return array
 *   Containing 2 arrays -- one ('lists') of all lists that have made use of
 * this email address (list_id -> list_data[]). One ('campaigns') of all
 * campaigns that have included this email (campaign_id -> campaign_data[])
 *
 * We include the campaign data because we need it to get accurate list
 * activity history anyway, and we want to keep the data handy to avoid
 * excessive API calls.
 */
function mailchimp_get_lists_by_email($email) {
  $campaign_ids = mailchimp_get_campaigns_for_email($email);
  $lists = mailchimp_get_lists();
  $filtered_lists = array();
  if ($campaign_ids) {
    // Iterate through campaigns, add each campaign's list as array index/value.
    foreach ($campaign_ids as $campaign_id) {
      $campaign_data = mailchimp_get_campaign_data($campaign_id);
      $filtered_lists['lists'][$campaign_data['list_id']] = $lists[$campaign_data['list_id']];
      $filtered_lists['campaigns'][$campaign_id] = $campaign_data;
    }
  }

  return $filtered_lists;
}
