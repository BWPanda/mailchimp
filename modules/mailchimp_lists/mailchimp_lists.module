<?php
module_load_include('inc', 'mailchimp_lists', 'mailchimp_lists.entity');

/**
 * Implements hook_menu().
 */
function mailchimp_lists_menu() {
  $items = array();
  
  $items['admin/config/services/mailchimp/lists'] = array(
    'title' => 'List Settings',
    'description' => 'Manage MailChimp Lists.',
    'page callback' => 'mailchimp_lists_overview_page',
    'access arguments' => array('administer mailchimp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailchimp_lists.admin.inc',
    'weight' => 10
  );
  $items['admin/config/services/mailchimp/lists/add'] = array(
    'title' => 'Add a list',
    'description' => 'Add a new MailChimp list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_lists_list_form'),
    'access arguments' => array('administer mailchimp'),
    'file' => 'mailchimp_lists.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/services/mailchimp/lists/%mailchimp_lists/edit'] = array(
    'title' => 'Edit a list',
    'description' => 'Edit a new MailChimp list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_lists_list_form', 5),
    'load arguments' => array(5),
    'access arguments' => array('administer mailchimp'),
    'file' => 'mailchimp_lists.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/mailchimp'] = array(
    'page callback' => 'mailchimp_lists_user_subscribe_page',
    'page arguments' => array(1),
    'title' => 'Newsletter Subscriptions',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'mailchimp_lists_edit_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Access callback for mailchimp user local task.
 *
 * @param object $user 
 * @return bool
 */
function mailchimp_lists_edit_access($user) {
  if (variable_get('mailchimp_lists_edit', TRUE) && user_edit_access($user)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_cron().
 *
 * Resubscribes all users to the required lists if the user has chosen to do so.
 */
function mailchimp_lists_cron() {
  if (variable_get('mailchimp_cron', FALSE) && $q = _mailchimp_get_api_object()) {
    $sql = "SELECT uid FROM {mailchimp_user} WHERE status = :status";
    $result = db_query_range($sql, 0, variable_get('mailchimp_batch_limit', 100), array(':status' => MAILCHIMP_USERSTATUS_PENDING));

    if ($result) {
      $lists = _mailchimp_get_required_lists();

      $batches = array();
      foreach ($result as $row) {
        if ($account = user_load($row->uid)) {
          db_query('UPDATE {mailchimp_user} SET status = :status WHERE uid = :uid', array(':status' => MAILCHIMP_USERSTATUS_CURRENT, ':uid' => $account->uid));
          // We don't update people if their status = 0 (but perhaps we could unsubscribe them?)
          if ($account->status) {
            foreach ($lists as $key => $list) {
              foreach ($account->roles as $rid => $info) {
                if (isset($list->roles[$rid])) {
                  $batches[$list->id][] = _mailchimp_load_user_list_mergevars($account, $list->id);
                  break;
                }
              }
            }
          }
        }
        else {
          // user exists in mc_user table even though they don't have an account, remove
          db_query('DELETE FROM {mailchimp_user} WHERE uid = :uid', array(':uid' => $account->uid));
        }
      }

      $count = 0;
      $ret = array();
      foreach ($batches as $listid => $batch) {
        if (count($batch)) {
          $ret = $q->listBatchSubscribe($listid, $batch, FALSE, TRUE);
          if ($ret['error_count'] > 0) {
            foreach ((array) $ret['errors'] as $error) {
              watchdog('mailchimp', 'MCAPI Error: %errmsg', array('!errmsg' => $error['message']), WATCHDOG_ERROR);
            }
          }
        }
        $count += $ret['success_count'];
      }

      watchdog('mailchimp', 'Updated !count records in MailChimp', array('!count' => $count), WATCHDOG_NOTICE);
    }
  }
}

/**
* Implements hook_form_FORM_ID_alter().
*   Add newsletter fields to registration form.
*/
function mailchimp_lists_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $account = $form['#user'];
  $category = $form['#user_category'];
  if (TRUE && variable_get('mailchimp_lists_register', TRUE)) {
    $account->roles = array(2 => 'authenticated');
    if (count(_mailchimp_get_available_lists($account)) > 0 ) {
      // wrap in a fieldset
      $form['mailchimp_lists'] = array(
        '#type' => 'fieldset',
        '#title' => t('Newsletters')
      );
      $form['mailchimp_lists'][] = mailchimp_lists_subscribe_auth_form(NULL, $account, FALSE);
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function mailchimp_lists_user_insert(&$edit, $account, $category) {
  if ($q = _mailchimp_get_api_object()) {
    foreach ((array) _mailchimp_get_available_lists($account) as $list) {
      // first deal with all required lists
      if ($list->listtype == MAILCHIMP_LISTTYPE_REQUIRED) {
        // process immediately
        if (!variable_get('mailchimp_cron', FALSE)) {
          // determine if a user is allowed in a given list
          $is_allowed = FALSE;
          $roles = $edit['roles'];
          if (!is_array($roles)) {
            $roles = $account->roles;
          }
          foreach ($list->roles as $key => $value) {
            if (array_key_exists($key, $roles)) {
              $is_allowed = TRUE;
              break;
            }
          }

          // they are allowed, update or subscribe
          if ($is_allowed) {
            $userinfo = _mailchimp_load_user_list_mergevars($account, $list->id);
            $userinfo['EMAIL'] = $edit['mail'];
            _mailchimp_subscribe_user($list, $account->mail, $userinfo, FALSE, $q);
          }
          // remove from list
          else {
            _mailchimp_unsubscribe_user($list, $account->mail, FALSE, $q);
          }
        }
        // mark for processing during next cron, if not already done
        else {
          $result = db_query("SELECT uid FROM {mailchimp_user} WHERE uid = :uid", array(':uid' => $account->uid));
          if ($result->rowCount() == 0) {
            db_insert('mailchimp_user')
              ->fields(array(
                'uid' => $account->uid,
                'status' => MAILCHIMP_USERSTATUS_PENDING,
              ))
              ->execute();
          }
        }
      }
      // process optional lists
      else {
        $ret = TRUE;
        $selected = @$edit['mailchimp_list_' . $list->id];
        if ($selected) {
          $merge_vars = _mailchimp_load_user_list_mergevars($account, $list->id);

          // include interest groups
          if (!empty($edit['mailchimp_list_' . $list->id . '_INTERESTS'])) {
            $merge_vars['INTERESTS'] = implode(',', array_filter($edit['mailchimp_list_' . $list->id . '_INTERESTS']));
          }

          $ret = _mailchimp_subscribe_user($list, $account->mail, $merge_vars, TRUE, $q);
        }

        if (!$ret) {
          drupal_set_message(t('There was a problem with your newsletter signup: @msg', array('@msg' => $q->errorMessage)));
        }
      }
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function mailchimp_lists_user_delete($account) {
  if ($q = _mailchimp_get_api_object()) {
    // remove a user from all required lists.
    foreach ((array) _mailchimp_get_required_lists() as $list) {
      db_delete('mailchimp_user')
          ->condition('uid', $account->uid)
          ->execute();
      _mailchimp_unsubscribe_user($list, $account->mail, FALSE, $q);
    }
  }
}

/**
 * Implements hook_user_update().
 */
function mailchimp_lists_user_update(&$edit, $account, $category) {
  if ($q = mailchimp_get_api_object()) {
    foreach ((array) mailchimp_lists_get_required_lists() as $list) {
      // update a users newsletter subscription immediately
      if (!variable_get('mailchimp_cron', FALSE)) {
        // determine if a user is allowed in a given list
        $is_allowed = FALSE;
        $roles = $account->roles;
        foreach ($list->roles as $key => $value) {
          if (array_key_exists($key, $roles)) {
            $is_allowed = TRUE;
            break;
          }
        }

        // they are allowed, update or subscribe
        if ($is_allowed) {
          $userinfo = _mailchimp_load_user_list_mergevars($account, $list->id);
          if(isset($edit['mail'])) {
            $userinfo['EMAIL'] = $edit['mail'];
          }
          _mailchimp_subscribe_user($list, $account->mail, $userinfo, FALSE, $q);
        }
        // remove from list
        else {
          _mailchimp_unsubscribe_user($list, $account->mail, FALSE, $q);
        }
      }
      // queue for processing during cron
      else {
        db_update('mailchimp_user')
            ->fields(array(
              'status' => MAILCHIMP_USERSTATUS_PENDING,
            ))
            ->condition('uid', $account->uid)
            ->execute();
      }
    }
  }
}

/**
 * Page callback for a user newsletter subscription page.
 *
 * @param  $account
 * @return array
 */
function mailchimp_lists_user_subscribe_page($account) {
  // get all available non-required lists
  $lists = mailchimp_lists_get_available_lists($account, MAILCHIMP_LISTTYPE_OPTIONAL, array('show_account_form' => 1));
  
  if (count($lists) == 0) {
    return(t('There are no available newsletters subscriptions.'));
  }

  return drupal_get_form('mail_lists_user_subscribe_form', $lists, $account);
}

/**
 * Return all subscription forms for a given user.
 * 
 * @param  $form
 * @param  $form_state
 * @param  $lists
 * @param  $account
 * @return $form
 */
function mail_lists_user_subscribe_form($form, &$form_state, $lists, $account) {
  $form['account'] = array('#type' => 'value', '#value' => $account);
  $form['mailchimp_lists'] = array('#tree' => TRUE);
  
  foreach ($lists as $list) {
    mailchimp_lists_auth_newsletter_form($form['mailchimp_lists'], $list, $account);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Return a form element for a single newsletter.
 */
function mailchimp_lists_auth_newsletter_form(&$form, $list, $account) {
  // determine if a user is subscribed to the list
  $is_subscribed = FALSE;
  if ($account && $account->uid > 0) {
    $is_subscribed = mailchimp_is_subscribed($list->mc_list_id, $account->mail);
  }

  // wrap in a div
  $wrapper_key = 'mailchimp_' . $list->id;
  $form[$wrapper_key] = array(
    '#prefix' => '<div class="mailchimp-newsletter-wrapper">',
    '#suffix' => '</div>',
  );
  $form[$wrapper_key]['list'] = array('#type' => 'value', '#value' => $list);

  $form[$wrapper_key]['subscribe'] = array(
    '#type'           => 'checkbox',
    '#title'          => ($list->label) ? t($list->label) : t('Subscribe to the @newsletter newsletter', array('@newsletter' => $list->name)),
    '#default_value'  => $is_subscribed,
    '#description'    => $list->description,
  );

  // present interest groups
  if ($list->settings['include_interest_groups']) {
    $memberinfo = mailchimp_get_memberinfo($list->mc_list_id, $account->mail);
    $mc_list = mailchimp_get_list($list->mc_list_id);
    $form[$wrapper_key]['interest_groups'] = array(
      '#type' => 'fieldset',
      '#title' => t('Interest Groups'),
      '#collapsible' => TRUE,
      '#collapsed' => !$is_subscribed,
      '#states' => array(
        'collapsed' => array(
           ':input[name="mailchimp_lists[mailchimp_' . $list->id . '][subscribe]"]' => array('checked' => FALSE),
        )
      )      
    );

    foreach($mc_list['intgroups'] as $group) {
      // ignore hidden fields
      // @todo: consider merging to hidden values
      if ($group['form_field'] == 'hidden') {
        break;
      }
      
      // grab the default values for this group
      // @todo: find a better way
      $default_merge_values = array();
      foreach($memberinfo['merges']['GROUPINGS'] as $membergroup) {
        if ($membergroup['id'] == $group['id']) {
          $default_merge_values = explode(",", str_replace(', ', ',', $membergroup['groups']));
          break;
        }
      }
      
      // set the form field type
      switch ($group['form_field']) {
        case 'radio':
          $field_type = 'radios';
          break;
        case 'dropdown':
          $field_type = 'select';
          break;
        default:
          $field_type = $group['form_field'];
      }

      // extract the field options
      $options = array();
      foreach ((array)$group['groups'] as $option) {
        $options[$option['name']] = $option['name'];
      }
      $form[$wrapper_key]['interest_groups'][$group['id']] = array(
        '#type'           => $field_type,
        '#title'          => $group['name'],
        '#options'        => $options,
        '#default_value'  => $is_subscribed ? $default_merge_values : array(),
        '#attributes'     => array('class' => array('mailchimp-newsletter-interests-' . $list->id))
      );
    }
  }

  return $form;
}

/**
 * Submit handler to add users to lists when editing/creating a user
 */
function mail_lists_user_subscribe_form_submit($form, &$form_state) {
  $account = $form_state['values']['account'];
  $mcapi = mailchimp_get_api_object();
  foreach ($form_state['values']['mailchimp_lists'] as $form_list) {
    $list = $form_list['list'];
    $is_subscribed = mailchimp_is_subscribed($list->mc_list_id, $account->mail);
    $ret = TRUE;
    $selected = $form_list['subscribe'];
    
    // unsubscribe a subscribed user who unchecked a list
    if ($is_subscribed && !$selected) {
      $ret = mailchimp_unsubscribe_user($list, $account->mail, TRUE, $mcapi);
    }
    else if ($selected) {
      // subscribe the user if they are not previously subscribed or update existing subscriptions
      $mergevars = mailchimp_lists_load_user_mergevars($account, $list);

      // include updated email address if already subscribed
      if (!empty($form_state['values']['mail']) && $is_subscribed) {
        $mergevars['EMAIL'] = $form_state['values']['mail'];
      }

      // include interest groups
      if (!empty($form_list['interest_groups'])) {
        $groupings = array();
        foreach($form_list['interest_groups'] as $key => $group) {
          $groups = is_array($group) ? implode(',', array_filter($group)) : $group;
          $groupings[] = array('id' => $key, 'groups' => $groups);
        }
        $mergevars['GROUPINGS'] = $groupings;
      }

      $ret = mailchimp_subscribe_user($list, $account->mail, $mergevars, TRUE, $mcapi);
    }

    if (!$ret) {
      drupal_set_message(t('There was a problem with your newsletter signup: @msg', array('@msg' => $mcapi->errorMessage)));
    }

  }
}

/**
 * Get the relevant merge vars for the given user for the given list
 */
function mailchimp_lists_load_user_mergevars($account, $list) {
  $values = array();

  // grab the saved list merge vars and filter out unset values
  if (!empty($list->settings['mergefields'])) {
    $mergevars = array_filter($list->settings['mergefields']);
    $mergevars = array_flip($mergevars);

    // match with token values
    $values = token_generate('user', $mergevars, array('user' => $account));

    // always add email
    $values += array(
        'EMAIL' => $account->mail
    );    
  }

  return $values;
}

/**
 * Return all available lists for a given user.
 *
 * @param string $account 
 * @param string $list_type list type constant
 * @param array $conditions list settings to filter the results by.
 * @return array lists
 */
function mailchimp_lists_get_available_lists($account = NULL, $list_type = MAILCHIMP_LISTTYPE_OPTIONAL, $conditions = array()) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  
  $lists = mailchimp_lists_load_multiple(array(), array('list_type' => $list_type));
  
  $user_lists = array();
  foreach($lists as $list) {
    foreach ($account->roles as $rid => $role) {
      if (isset($list->settings['roles'][$rid])) {
        if (!empty($conditions)) {
          foreach($conditions as $key => $condition) {
            if ($list->settings[$key] == $condition) {
              $user_lists[] = $list;
            }
          }
        }
        else {          
          $user_lists[] = $list;
        }
        break;
      }
    }
  }
  
  return $user_lists;
}


function mailchimp_lists_get_required_lists() {
 return array(); 
}