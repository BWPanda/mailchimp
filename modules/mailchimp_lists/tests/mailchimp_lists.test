<?php
/**
 * Tests the functionality of the Mailchimp Lists module.
 */

class MailchimpListsBasicTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Mailchimp Lists',
      'description' => 'Test List Subscription Logic.',
      'group' => 'Mailchimp',
    );
  }

  /**
   * @return bool|void
   */
  public function setUp() {
    // Use a profile that contains required modules:
    $prof = drupal_get_profile();
    $this->profile = $prof;
    // Enable any modules required for the test. This should be an array of
    // module names.
    $enabled_modules = array(
      'libraries',
      'mailchimp',
      'entity',
      'entity_token',
      'mailchimp_lists',
    );
    parent::setUp($enabled_modules);
    variable_set('mailchimp_api_key', 'mailchimp_testing_mode');
    // Create some users with different roles/permissions:
    $this->authorized_user = $this->drupalCreateUser(array());
    // Create some lists:
    $lists = array();

    $list = new stdClass();
    $list->label = 'Anonymous Test List';
    $list->name = 'anonymous_test_list';
    $list->description = 'Anonymous list description';
    $list->list_type = 'freeform';
    $list->mc_list_id = 'test_list_A';
    $list->settings = array(
      'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID, DRUPAL_ANONYMOUS_RID => DRUPAL_ANONYMOUS_RID),
      'mergefields' => array('EMAIL'),
      'cron' => FALSE,
      'doublein' => FALSE,
      'include_interest_groups' => FALSE,
    );
    $lists[] = $list;

    $list = new stdClass();
    $list->label = 'Optional Test List';
    $list->name = 'optional_test_list';
    $list->description = 'Optional list description';
    $list->list_type = 'optional';
    $list->mc_list_id = 'test_list_B';
    $list->settings = array(
      'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID),
      'mergefields' => array(''),
      'cron' => FALSE,
      'show_account_form' => TRUE,
      'doublein' => FALSE,
      'include_interest_groups' => FALSE,
    );
    $lists[] = $list;

    $list = new stdClass();
    $list->label = 'Required Test List';
    $list->name = 'required_test_list';
    $list->description = 'Required list description';
    $list->list_type = 'required';
    $list->mc_list_id = 'test_list_C';
    $list->settings = array(
      'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID),
      'mergefields' => array(),
      'cron' => FALSE,
      'doublein' => FALSE,
      'include_interest_groups' => FALSE,
    );
    $lists[] = $list;

    foreach ($lists as $list) {
      mailchimp_lists_save($list);
    }
  }

  /**
   * Tests subscription and deletions from mailchimp lists of various types
   */
  public function testMailchimpListSubscriptionWorkflow() {
    // *************************************************************************
    // 1. Test basic subscription adds for each user type and list type
    // *************************************************************************
    $test_subs = $this->subscribeUsers();
    drupal_flush_all_caches();
    foreach ($test_subs['anon']['success'] as $email) {
      $this->confirmSubscriptionStatus($email, 'test_list_A', 'Subscriptions: Anonymous', TRUE);
    }
    foreach ($test_subs['auth']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus($user->mail, 'test_list_B', 'Subscriptions: Optional', TRUE);
    }
    foreach ($test_subs['req']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus($user->mail, 'test_list_C', 'Subscriptions: Required', TRUE);
    }
    drupal_flush_all_caches();
    // *************************************************************************
    // 2. Test deletion of an Authenticated User removes the user from optional
    // list.
    // *************************************************************************
    foreach ($test_subs['auth']['success'] as $uid) {
      $user = user_load($uid);
      $email = $user->mail;
      user_delete($uid);
      $this->confirmSubscriptionStatus($email, 'test_list_B', 'Subscriptions: Optional', FALSE, " after account deletion ");
    }
    // *************************************************************************
    // 3. Test deletion of an Authenticated User removes the user from required
    // list.
    // *************************************************************************
    foreach ($test_subs['req']['success'] as $uid) {
      $user = user_load($uid);
      $email = $user->mail;
      user_delete($uid);
      $this->confirmSubscriptionStatus($email, 'test_list_C', 'Subscriptions: Required', FALSE, " after account deletion ");
    }
    // *************************************************************************
    // 4. Test basic subscription adds for each user type and list type with
    // cron enabled for the lists.
    // *************************************************************************
    $this->setListsCron(TRUE);
    $cron_test_subs = $this->subscribeUsers();
    // Since cron is enabled, no new subscriptions should be active:
    foreach ($cron_test_subs['anon']['success'] as $email) {
      $this->confirmSubscriptionStatus($email, 'test_list_A', 'Cron Subs: Anonymous', FALSE, " BEFORE cron is run ");
    }
    foreach ($cron_test_subs['auth']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus($user->mail, 'test_list_B', 'Cron Subs: Optional', FALSE, " BEFORE cron is run ");
    }
    foreach ($cron_test_subs['req']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus($user->mail, 'test_list_C', 'Cron Subs: Required', FALSE, " BEFORE cron is run ");
    }
    // Now we run cron, and confirm that subscriptions have become active:
    $this->cronRun();
    // Flush caches, or we'll get the same results we just got no matter what!
    drupal_flush_all_caches();
    foreach ($cron_test_subs['anon']['success'] as $email) {
      $this->confirmSubscriptionStatus($email, 'test_list_A', 'Cron Subs: Anonymous', TRUE, " AFTER cron is run ");
    }
    foreach ($cron_test_subs['auth']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus($user->mail, 'test_list_B', 'Cron Subs: Optional', TRUE, " AFTER cron is run ");
    }
    foreach ($cron_test_subs['req']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus($user->mail, 'test_list_C', 'Cron Subs: Required', TRUE, " AFTER cron is run ");
    }

    return TRUE;
  }

  protected function subscribeUsers($anon = 1, $auth = 1, $req = 1) {
    $ret = array();
    $offset = $this->randomString(4);
    // *************************************************************************
    // 1. Submit anonymous signup forms for the test Freeform list.
    // *************************************************************************
    if ($anon) {
      $ret['anon'] = array(
        'success' => array(),
        'failure' => array(),
      );
      $form_edit = array();
      for ($n = 0; $n < $anon; $n++) {
        $email = $this->randomEmail();
        $form_edit['mailchimp_lists[mailchimp_anonymous_test_list][mergevars][EMAIL]'] = $email;
        $this->drupalPost('mailchimp/subscribe', $form_edit, t('Subscribe'));
        // If we test with large values of $n we'll want to remove this:
        $result = $this->assertResponse(200, 'Anonymous subscription #' . ($n + 1)) ? 'success' : 'failure';
        $ret['anon'][$result][] = $email;
      }
    }
    if ($auth) {
      $ret['auth'] = array(
        'success' => array(),
        'failure' => array(),
      );
      $form_edit = array(
        'mailchimp_lists[mailchimp_optional_test_list][subscribe]' => TRUE,
      );
      for ($t = 0; $t < $auth; $t++) {
        $username = 'authuser_' . $t . '_' . $offset;
        $this->$username = $this->drupalCreateUser();
        $id = $this->$username->uid;
        $this->drupalLogin($this->$username);
        $this->drupalPost('user/' . $id . "/mailchimp", $form_edit, t('Save'));
        $result = $this->assertResponse(200, 'Authenticated subscription to optional list allowed.') ? 'success' : 'failure';
        $ret['auth'][$result][] = $this->$username->uid;
      }
    }
    if ($req) {
      $ret['req'] = array(
        'success' => array(),
        'failure' => array(),
      );
      $edit = array(
        'pass' => "test",
        'status' => 1,
        'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID),
      );
      for ($r = 0; $r < $req; $r++) {
        $email = $this->randomEmail();
        $edit['name'] = "Test Authenticated User " . $offset . " " . $r;
        $edit['mail'] = $email;
        $is_subscribed = mailchimp_is_subscribed('test_list_C', $email);
        $message = $is_subscribed ? "subscribed." : "not subscribed.";
        // Confirm this email address isn't already subscribed:
        $this->assertFalse($is_subscribed, 'Email address ' . $email . ' initial status on Required List: ' . $message, 'Subscriptions: Required');
        // Create a user with the authenticated role (req'd by required list).
        // This should trigger the hook that subscribes this user:
        $account = user_save(drupal_anonymous_user(), $edit);
        if ($account) {
          $ret['req']['success'][] = $account->uid;
        }
        else {
          $ret['req']['failure'][] = $email;
        }
      }
    }

    return $ret;
  }

  protected function confirmSubscriptionStatus($email, $mc_list_id, $category, $expected_outcome, $details = ' ') {
    $result = mailchimp_is_subscribed($mc_list_id, $email);
    $message = ($result === $expected_outcome) ? "successful." : "failed.";
    $method = $expected_outcome ? "assertTrue" : "assertFalse";
    $this->$method($result, 'Subscription for ' . $email . $details . $message, $category);
  }
  
  protected function setListsCron($flag) {
    $lists = mailchimp_lists_load_multiple();
    foreach ($lists as $list) {
      $list->settings['cron'] = $flag;
      mailchimp_lists_save($list);
    }
  }
  
  protected function randomEmail() {
    return $this->randomName() . "@" . $this->randomName() . ".net";
  }
}
