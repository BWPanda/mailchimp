<?php
/**
 * @file
 * Test class and methods for the Mailchimp Lists module.
 */

class MailchimpListsTestCase extends DrupalWebTestCase {

  /** @var string $authorized_user */
  public $authorized_user;

  /**
   * Returns info displayed in the test interface.
   *
   * @return array
   *   Formatted as specified by simpletest.
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'MailChimp Lists',
      'description' => 'Test Lists Logic.',
      'group' => 'MailChimp',
    );
  }

  /**
   * Pre-test setup function.
   *
   * Enables dependencies.
   * Sets the mailchimp_api_key to the test-mode key.
   */
  public function setUp() {
    // Use a profile that contains required modules:
    $prof = drupal_get_profile();
    $this->profile = $prof;
    // Enable modules required for the test.
    $enabled_modules = array(
      'libraries',
      'mailchimp',
      'entity',
      'entity_token',
      'mailchimp_lists',
    );
    parent::setUp($enabled_modules);
    variable_set('mailchimp_api_classname', 'MailChimpTest');
    variable_set('mailchimp_api_key', 'MAILCHIMP_TEST_API_KEY');

    // Create a user.
    $this->authorized_user = $this->drupalCreateUser(array());
  }

  /**
   * Tests retrieval of a specific list.
   */
  public function testGetList() {
    $list = mailchimp_get_list('mailchimp_test_list_a');

    $this->assertEqual($list['id'], 'mailchimp_test_list_a', 'Tested list retrieval.');
  }

  /**
   * Tests retrieval of a specific set of lists.
   */
  public function testMultiListRetrieval() {

    $list_ids = array(
      'mailchimp_test_list_a',
      'mailchimp_test_list_b',
    );

    $lists = mailchimp_get_lists($list_ids);

    $this->assertEqual(count($lists), 2, 'Tested correct list count on retrieval.');

    foreach ($list_ids as $list_id) {
      $this->assertTrue((isset($lists[$list_id])), 'Tested valid list ID retrieved: ' . $list_id);
      unset($lists[$list_id]);
    }

    $this->assertEqual(count($lists), 0, 'Tested all lists retrieved.');
  }

  /**
   * Tests retrieval of mergevars for a set of lists.
   */
  public function testGetMergevars() {
    $list_ids = array(
      'mailchimp_test_list_a',
    );

    $lists = mailchimp_get_mergevars($list_ids);

    $this->assertTrue(is_array($lists), 'Tested valid lists array returned.');
    $this->assertTrue(!empty($lists), 'Tested valid lists returned.');

    foreach($lists as $list) {
      $this->assertTrue(in_array($list['id'], $list_ids), 'Tested valid list ID retrieved: ' . $list['id']);

      $this->assertTrue(is_array($list['merge_vars']), 'Tested list contains merge vars array.');

      foreach ($list['merge_vars'] as $merge_var) {
        $this->assertTrue(isset($merge_var['name']), 'Tested valid merge var.');
      }
    }
  }

  /**
   * Tests retrieval of member info for a list and email address.
   */
  public function testGetMemberInfo() {
    $list = 'mailchimp_test_list_a';
    $email = 'user@example.org';
    $subscribed = mailchimp_subscribe($list, $email);

    $this->assertTrue($subscribed, 'Tested new user subscription.');

    $member_info = mailchimp_get_memberinfo($list, $email);

    $this->assertTrue(is_array($member_info), 'Tested valid member info array returned.');
    $this->assertEqual($member_info['email'], $email, 'Tested valid member email retrieved: ' . $member_info['email']);
  }

  /**
   * Tests the status of a member's subscription to a list.
   */
  public function testIsSubscribed() {
    $list = 'mailchimp_test_list_a';
    $email = 'user@example.org';
    $subscribed = mailchimp_subscribe($list, $email);

    $this->assertTrue($subscribed, 'Tested new user subscription.');

    $subscribed = mailchimp_is_subscribed($list, $email);
    $this->assertTrue($subscribed, 'Tested user is subscribed to list.');
  }

  /**
   * Tests subscribing a member to a list.
   */
  public function testSubscribe() {
    $list = 'mailchimp_test_list_a';
    $email = 'user@example.org';
    $subscribed = mailchimp_subscribe($list, $email);

    $this->assertTrue($subscribed, 'Tested new user subscription.');

    $list = 'mailchimp_invalid_list';
    $subscribed = mailchimp_subscribe($list, $email);

    $this->assertFalse($subscribed, 'Tested new user subscription to invalid list.');
  }

  /**
   * Tests updating a list member.
   */
  public function testUpdateMember() {
    $list = 'mailchimp_test_list_a';
    $email = 'user@example.org';
    $subscribed = mailchimp_subscribe($list, $email);

    $this->assertTrue($subscribed, 'Tested new user subscription.');

    $updated = mailchimp_update_member($list, $email, NULL, 'text');

    $this->assertTrue($updated, 'Tested user update.');

    $member_info = mailchimp_get_memberinfo($list, $email);

    $this->assertEqual($member_info['email'], $email, 'Tested updated member email retrieved: ' . $member_info['email']);
  }

  /**
   * Tests unsubscribing a member from a list.
   */
  public function testUnsubscribe() {
    $list = 'mailchimp_test_list_a';
    $email = 'user@example.org';
    $subscribed = mailchimp_subscribe($list, $email);

    $this->assertTrue($subscribed, 'Tested new user subscription.');

    $unsubscribed = mailchimp_unsubscribe($list, $email);

    $this->assertTrue($unsubscribed, 'Tested user unsubscription.');

    $member_info = mailchimp_get_memberinfo($list, $email);

    $this->assertEqual($member_info['status'], 'unsubscribed', 'Tested updated subscription state.');

    // Reset subscription.
    mailchimp_subscribe($list, $email);

    // Delete member.
    mailchimp_unsubscribe($list, $email, TRUE);

    $member_info = mailchimp_get_memberinfo($list, $email);

    $this->assertTrue(empty($member_info), 'Tested user deletion on unsubscribe.');
  }

  /**
   * Tests retrieval of list segments for a list.
   */
  public function testGetListSegments() {

  }

  /**
   * Tests creation of a segmenet for a list.
   */
  public function testCreateSegment() {

  }

  /**
   * Tests adding a subscriber to a list segment.
   */
  public function testAddSegmentSubscriber() {

  }

  /**
   * Tests adding batch subscribers to a list segment.
   */
  public function testAddSegmentBatchSubscribers() {

  }

  /**
   * Tests retrieval of webhooks for a list.
   */
  public function testGetWebhook() {

  }

  /**
   * Tests adding a webhook to a list.
   */
  public function testAddWebhook() {

  }

  /**
   * Tests deletion of a webhook.
   */
  public function testDeleteWebhook() {

  }

  /**
   * Tests retrieval of subscribed lists for an email address.
   */
  public function testGetListsByEmail() {

  }

  /**
   * Helper function to generate a random email address.
   *
   * @return string
   *   approximate email format
   */
  protected function randomEmail() {
    return $this->randomName() . "@" . $this->randomName() . ".net";
  }
}