<?php
/**
 * @file
 * Test class and methods for the Mailchimp Lists module.
 */

class MailchimpListsBasicTestCase extends DrupalWebTestCase {

  /**
   * Returns info displayed in the test interface.
   * 
   * @return array
   *   Formatted as specified by simpletest.
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Mailchimp Lists',
      'description' => 'Test List Subscription Logic.',
      'group' => 'Mailchimp',
    );
  }

  /**
   * Pre-test setup function.
   * 
   * Enables dependencies, sets the mailchimp_api_key to the test-mode key, and
   * sets up the 3 mailchimp_lists entities used in our tests:
   *
   * anonymous_test_list entity attaches to the Mailchimp List test_list_A
   * 
   * optional_test_list entity attaches to the Mailchimp List test_list_B
   * 
   * required_test_list entity attaches to the Mailchimp List test_list_C
   */
  public function setUp() {
    // Use a profile that contains required modules:
    $prof = drupal_get_profile();
    $this->profile = $prof;
    // Enable any modules required for the test. This should be an array of
    // module names.
    $enabled_modules = array(
      'libraries',
      'mailchimp',
      'entity',
      'entity_token',
      'mailchimp_lists',
    );
    parent::setUp($enabled_modules);
    variable_set('mailchimp_api_key', 'mailchimp_testing_mode');
    // Create some users with different roles/permissions:
    $this->authorized_user = $this->drupalCreateUser(array());
    // Create some lists:
    $lists = array();

    $list = new stdClass();
    $list->label = 'Anonymous Test List';
    $list->name = 'anonymous_test_list';
    $list->description = 'Anonymous list description';
    $list->list_type = 'freeform';
    $list->mc_list_id = 'test_list_A';
    $list->settings = array(
      'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID, DRUPAL_ANONYMOUS_RID => DRUPAL_ANONYMOUS_RID),
      'mergefields' => array('EMAIL'),
      'cron' => FALSE,
      'doublein' => FALSE,
      'include_interest_groups' => FALSE,
    );
    $lists[] = $list;

    $list = new stdClass();
    $list->label = 'Optional Test List';
    $list->name = 'optional_test_list';
    $list->description = 'Optional list description';
    $list->list_type = 'optional';
    $list->mc_list_id = 'test_list_B';
    $list->settings = array(
      'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID),
      'mergefields' => array(''),
      'cron' => FALSE,
      'show_account_form' => TRUE,
      'doublein' => FALSE,
      'include_interest_groups' => FALSE,
    );
    $lists[] = $list;

    $list = new stdClass();
    $list->label = 'Required Test List';
    $list->name = 'required_test_list';
    $list->description = 'Required list description';
    $list->list_type = 'required';
    $list->mc_list_id = 'test_list_C';
    $list->settings = array(
      'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID),
      'mergefields' => array(),
      'cron' => FALSE,
      'doublein' => FALSE,
      'include_interest_groups' => FALSE,
    );
    $lists[] = $list;

    foreach ($lists as $list) {
      mailchimp_lists_save($list);
    }
  }

  /**
   * Tests subscription workflows.
   * 
   * The core test function runs through a series of subscription requests and
   * with different settings enabled and verifies that users are subscribed,
   * or not, correctly.
   * 
   * @return bool
   *   Returns TRUE on completion.
   */
  public function testMailchimpListSubscriptionWorkflow() {
    // *************************************************************************
    // 1. Test basic subscription adds for each user type and list type
    // *************************************************************************
    $test_subs = $this->subscribeUsers();
    drupal_flush_all_caches();
    foreach ($test_subs['anon']['success'] as $email) {
      $this->confirmSubscriptionStatus(TRUE, $email, 'test_list_A', 'Subscriptions: Anonymous');
    }
    foreach ($test_subs['auth']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus(TRUE, $user->mail, 'test_list_B', 'Subscriptions: Optional');
    }
    foreach ($test_subs['req']['success'] as $uid) {
      $user = user_load($uid);
      $this->confirmSubscriptionStatus(TRUE, $user->mail, 'test_list_C', 'Subscriptions: Required');
    }
    // *************************************************************************
    // 2. Test deletion of an Authenticated User removes the user from optional
    // list.
    // *************************************************************************
    foreach ($test_subs['auth']['success'] as $uid) {
      $user = user_load($uid);
      $email = $user->mail;
      user_delete($uid);
      $this->confirmSubscriptionStatus(FALSE, $email, 'test_list_B', 'Subscriptions: Optional', " after account deletion");
    }
    // *************************************************************************
    // 3. Test deletion of an Authenticated User removes the user from required
    // list.
    // *************************************************************************
    foreach ($test_subs['req']['success'] as $uid) {
      $user = user_load($uid);
      $email = $user->mail;
      user_delete($uid);
      $this->confirmSubscriptionStatus(FALSE, $email, 'test_list_C', 'Subscriptions: Required', " after account deletion");
    }
    // *************************************************************************
    // 4. Test basic subscription adds for each user type and list type with
    // cron enabled for the lists.
    // *************************************************************************
    $this->setListsCron(TRUE);
    $cron_test_subs = $this->subscribeUsers();
    // Since cron is enabled, no new subscriptions should be active:
    $anon_email = $cron_test_subs['anon']['success'][0];
    $this->confirmSubscriptionStatus(FALSE, $anon_email, 'test_list_A', 'Cron Subs: Anonymous', " BEFORE cron is run");

    $uid = $cron_test_subs['auth']['success'][0];
    $auth_user = user_load($uid);
    $auth_email = $auth_user->mail;
    $this->confirmSubscriptionStatus(FALSE, $auth_email, 'test_list_B', 'Cron Subs: Optional', " BEFORE cron is run");

    $uid = $cron_test_subs['req']['success'][0];
    $req_user = user_load($uid);
    $req_email = $req_user->mail;
    $this->confirmSubscriptionStatus(FALSE, $req_email, 'test_list_C', 'Cron Subs: Required', " BEFORE cron is run");

    // Now we run cron and confirm that subscriptions have become active:
    $this->cronRun();
    $this->confirmSubscriptionStatus(TRUE, $anon_email, 'test_list_A', 'Cron Subs: Anonymous', " AFTER cron is run");
    $this->confirmSubscriptionStatus(TRUE, $auth_email, 'test_list_B', 'Cron Subs: Optional', " AFTER cron is run");
    $this->confirmSubscriptionStatus(TRUE, $req_email, 'test_list_C', 'Cron Subs: Required', " AFTER cron is run");

    // *************************************************************************
    // 5. Test basic subscription deletes for each user type and list type with
    // cron enabled for the lists.
    // *************************************************************************
    user_delete($auth_user->uid);
    $this->confirmSubscriptionStatus(TRUE, $auth_email, 'test_list_B', 'Cron Subs: Optional', " after account deletion, BEFORE cron");
    user_delete($req_user->uid);
    // Work in a test for cron being disabled with items in the queue:
    $this->setListsCron(FALSE);
    $this->confirmSubscriptionStatus(TRUE, $req_email, 'test_list_C', 'Cron Subs: Required', " after account deletion & queuing disabled, BEFORE cron");
    // Now we run cron, and confirm that subscriptions have been cancelled:
    $this->cronRun();
    $this->confirmSubscriptionStatus(FALSE, $auth_email, 'test_list_B', 'Cron Subs: Optional', " after account deletion, AFTER cron");
    $this->confirmSubscriptionStatus(FALSE, $req_email, 'test_list_C', 'Cron Subs: Required', " after account deletion, AFTER cron");

    // *************************************************************************
    // 6. Test for appropriate attention to role changes on required and
    // optional lists.
    // *************************************************************************
    $roles_subs = $this->subscribeUsers(0, 1, 0);
    // We should now have one user added to the required and the optional list:
    $roles_test_user = user_load($roles_subs['auth']['success'][0]);
    $this->confirmSubscriptionStatus(TRUE, $roles_test_user->mail, 'test_list_B', 'Roles Subs: Optional', " user with correct roles opted in");
    $this->confirmSubscriptionStatus(TRUE, $roles_test_user->mail, 'test_list_C', 'Roles Subs: Required', " user with correct roles created");
    // Create our exclusive role:
    $role = new stdClass();
    $role->name = 'exclusive';
    user_role_save($role);
    $exclusive_role = user_role_load_by_name('exclusive');
    $exclusive_role_id = $exclusive_role->rid;
    $lists = array();
    $lists['optional'] = mailchimp_lists_load_multiple_by_name('optional_test_list');
    $lists['required'] = mailchimp_lists_load_multiple_by_name('required_test_list');
    foreach ($lists as $list) {
      $list->settings['roles'] = array($exclusive_role_id => $exclusive_role_id);
      mailchimp_lists_save($list);
    }

    // The user no longer has the appropriate roles. Check that they have been
    // removed from the now-exclusive lists:
    $this->confirmSubscriptionStatus(FALSE, $roles_test_user->mail, 'test_list_B', 'Roles Subs: Optional', " after list role changed to be exclusive");
    $this->confirmSubscriptionStatus(FALSE, $roles_test_user->mail, 'test_list_C', 'Roles Subs: Required', " after list role changed to be exclusive");
    // @todo: remove this call to user_sync, which is here to work around a bug.
    // @todo: solution is to add feature (& trigger) suggested in #2018377
    mailchimp_lists_user_sync($roles_test_user, $roles_test_user->mail, $roles_test_user->mail, TRUE);
    // Now let's give the user the appropriate role (and trigger subscription.)
    $new_roles = $roles_test_user->roles;
    $new_roles[$exclusive_role_id] = $exclusive_role->name;
    $roles_test_user = user_save($roles_test_user, array('roles' => $new_roles));
    // We should now be subscribed to the required list, but not the optional:
    $this->confirmSubscriptionStatus(FALSE, $roles_test_user->mail, 'test_list_B', 'Roles Subs: Optional', " after adding exclusive role");
    $this->confirmSubscriptionStatus(TRUE, $roles_test_user->mail, 'test_list_C', 'Roles Subs: Required', " after adding exclusive role");

    return TRUE;
  }

  /**
   * Subscribes a given number of users to each test list.
   * 
   * @int $anon
   *   Number of anonymous email to add to Freeform list.
   * @int $auth
   *   Number of authenticated users to create & add to optional list. (note
   * that these users will also be added to the required lists in many cases)
   * @int $req
   *   Number of authenticated users to create, triggering user hooks that
   * should add them to required lists.
   * @return array
   *   An array of success & failure arrays for each type, containing email
   * addresses for the 'anon' lists and UID's for the user lists.
   */
  protected function subscribeUsers($anon = 1, $auth = 1, $req = 1) {
    $ret = array();
    $offset = $this->randomString(4);
    // *************************************************************************
    // 1. Submit anonymous signup forms for the test Freeform list.
    // *************************************************************************
    if ($anon) {
      $ret['anon'] = array(
        'success' => array(),
        'failure' => array(),
      );
      $form_edit = array();
      for ($n = 0; $n < $anon; $n++) {
        $email = $this->randomEmail();
        $form_edit['mailchimp_lists[mailchimp_anonymous_test_list][mergevars][EMAIL]'] = $email;
        $this->drupalPost('mailchimp/subscribe', $form_edit, t('Subscribe'));
        // If we test with large values of $n we'll want to remove this:
        $result = $this->assertResponse(200, 'Anonymous subscription #' . ($n + 1)) ? 'success' : 'failure';
        $ret['anon'][$result][] = $email;
      }
    }
    if ($auth) {
      $ret['auth'] = array(
        'success' => array(),
        'failure' => array(),
      );
      $form_edit = array(
        'mailchimp_lists[mailchimp_optional_test_list][subscribe]' => TRUE,
      );
      for ($t = 0; $t < $auth; $t++) {
        $username = 'authuser_' . $t . '_' . $offset;
        $this->$username = $this->drupalCreateUser();
        $id = $this->$username->uid;
        $this->drupalLogin($this->$username);
        $this->drupalPost('user/' . $id . "/mailchimp", $form_edit, t('Save'));
        $result = $this->assertResponse(200, 'Authenticated subscription to optional list allowed.') ? 'success' : 'failure';
        $ret['auth'][$result][] = $this->$username->uid;
      }
    }
    if ($req) {
      $ret['req'] = array(
        'success' => array(),
        'failure' => array(),
      );
      $edit = array(
        'pass' => "test",
        'status' => 1,
        'roles' => array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID),
      );
      for ($r = 0; $r < $req; $r++) {
        $email = $this->randomEmail();
        $edit['name'] = "Test Authenticated User " . $offset . " " . $r;
        $edit['mail'] = $email;
        // Create a user with the authenticated role (req'd by required list).
        // This should trigger the hook that subscribes this user:
        $account = user_save(drupal_anonymous_user(), $edit);
        if ($account) {
          $ret['req']['success'][] = $account->uid;
        }
        else {
          $ret['req']['failure'][] = $email;
        }
      }
    }

    return $ret;
  }

  /**
   * An assertion wrapper for the common task of check a subscription status.
   * 
   * @boolean $expected_outcome
   *   Whether we expect the email to be subscribed to the list or not.
   * @string $email
   *   Email address to check the status of.
   * @string $mc_list_id
   *   ID of the mc list to check against (test_list_X where X = A, B or C)
   * @string $category
   *   Populates the column category on the test output page for this assertion.
   * @string $details
   *   Text to drop into the output message to distinguish this test.
   */
  protected function confirmSubscriptionStatus($expected_outcome, $email, $mc_list_id, $category, $details = '') {
    $result = mailchimp_is_subscribed($mc_list_id, $email, TRUE);
    $message = ($result === $expected_outcome) ? ": confirmed." : ": NOT confirmed.";
    $method = $expected_outcome ? "assertTrue" : "assertFalse";
    $outcome = $expected_outcome ? " subscribed" : " NOT subscribed";
    $this->$method($result, 'Confirming ' . $email . $outcome . $details . $message, $category);
  }

  /**
   * Helper function to set the Cron setting on the test lists.
   * 
   * @boolean $flag
   *   Whatever value you want to set the Cron settigs to.
   */
  protected function setListsCron($flag) {
    $lists = mailchimp_lists_load_multiple();
    foreach ($lists as $list) {
      $list->settings['cron'] = $flag;
      mailchimp_lists_save($list);
    }
  }

  /**
   * Helper function to generate a random email address.
   * 
   * @return string
   *   approximate email format
   */
  protected function randomEmail() {
    return $this->randomName() . "@" . $this->randomName() . ".net";
  }
}
