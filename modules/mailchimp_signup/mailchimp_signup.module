<?php

/**
 * @file
 * Mailchimp Signup module. Allows creation of signup forms integrated with
 * Mailchimp.
 */

define('MAILCHIMP_SIGNUP_BLOCK', 1);
define('MAILCHIMP_SIGNUP_PAGE', 2);
define('MAILCHIMP_SIGNUP_BOTH', 3);

/**
 * Implements hook_menu().
 */
function mailchimp_signup_menu() {
  $items = array();

  $items['admin/config/services/mailchimp/signup'] = array(
    'title' => 'Signup',
    'description' => 'Manage MailChimp Signup blocks and pages.',
    'page callback' => 'mailchimp_signup_overview_page',
    'access arguments' => array('administer mailchimp'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/mailchimp_signup.admin.inc',
    'weight' => 10,
  );
  $items['admin/config/services/mailchimp/signup/add'] = array(
    'title' => 'Add a Signup Form',
    'description' => 'Add a new MailChimp Signup Block/Page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_signup_signup_form'),
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp_signup.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/services/mailchimp/signup/%mailchimp_signup/edit'] = array(
    'title' => 'Edit a signup form',
    'description' => 'Edit a Signup form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_signup_signup_form', 5),
    'load arguments' => array(5),
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp_signup.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/mailchimp/signup/%mailchimp_signup/delete'] = array(
    'title' => 'Delete Signup form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_signup_signup_delete_form', 5),
    'access arguments' => array('administer mailchimp'),
    'file' => 'includes/mailchimp_signup.admin.inc',
  );

  $signups = mailchimp_signup_load_multiple();
  foreach($signups as $signup) {
    if (intval($signup->mode) > 1) {
      $items[$signup->settings['path']] = array(
        'title' => $signup->title,
        'page callback' => 'mailchimp_signup_page',
        'page arguments' => array($signup->mcs_id),
        'access callback' => 'mailchimp_signup_page_access',
        'type' => MENU_SUGGESTED_ITEM,
      );
    }
  }
  return $items;
}

/**
 * Wrapper around mailchimp_signup_load_multiple to load a single signup entity.
 */
function mailchimp_signup_load($signup_id) {
  $signups = mailchimp_signup_load_multiple(array($signup_id));
  if ($signups) {
    return reset($signups);
  }
  else {
    return FALSE;
  }
}

/**
 * Loads multiple signup forms.
 */
function mailchimp_signup_load_multiple($signup_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($signup_ids)) {
    $signup_ids = FALSE;
  }

  return entity_load('mailchimp_signup', $signup_ids, $conditions, $reset);
}

/**
 * Gets an array of all Signups, keyed by the list name.
 *
 * @string $name
 *   If set, the signup with the given name is returned.
 *
 * @return MailchimpSignup[]
 *   Depending whether $name isset, an array of signups or a single one.
 */
function mailchimp_signup_load_multiple_by_name($name = NULL) {
  $signups = entity_load_multiple_by_name('mailchimp_signup', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($signups) : $signups;
}

/**
 * Implements hook_entity_info().
 */
function mailchimp_signup_entity_info() {
  $entities = array(
    'mailchimp_signup' => array(
      'label' => t('MailChimp Signup'),
      'plural label' => t('MailChimp Signups'),
      'entity class' => 'MailchimpSignup',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'mailchimp_signup',
      'uri callback' => 'mailchimp_signup_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'label callback' => 'entity_class_label',
      'module' => 'mailchimp_signup',
      'entity keys' => array(
        'id' => 'mcs_id',
        'name' => 'name',
      ),
      'bundles' => array(
        'mailchimp_signup' => array(
          'label' => t('MailChimp Signup'),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $entities;
}

function mailchimp_signup_page_access() {
  return TRUE;
}

/**
 * Menu callback for Signup pages.
 */
function mailchimp_signup_page($signup_id) {
  $signup = mailchimp_signup_load($signup_id);
  return drupal_get_form('mailchimp_signup_subscribe_form', $signup);
}

/**
 * Returns a subscription form for mailchimp lists.
 *
 * If there are multiple lists, this generates a single form for all of them.
 */
function mailchimp_signup_subscribe_form($form, &$form_state, $signup) {
  $form['#attributes'] = array('class' => array('mailchimp-signup-subscribe-form'));
  $form['description'] = array(
    '#markup' => $signup->settings['description'],
  );
  $form['mailchimp_lists'] = array('#tree' => TRUE);
  $lists = mailchimp_get_lists($signup->mc_lists);
  $multiple_lists = (count($lists) != 1);
  
  if ($multiple_lists) {
    foreach ($lists as $list) {
      // Wrap in a div:
      $wrapper_key = 'mailchimp_' . $list['web_id'];
      $form['mailchimp_lists'][$wrapper_key] = array(
        '#prefix' => '<div id="mailchimp-newsletter-' . $list['web_id'] . '" class="mailchimp-newsletter-wrapper">',
        '#suffix' => '</div>',
      );
      // @todo add interest groups (will require a setting)
      $form['mailchimp_lists'][$wrapper_key][$list['id']] = array(
        '#type' => 'checkbox',
        '#title' => $list['name'],
        '#default_value' => FALSE,
      );
    }
  }
  else {
    // just list the listname
  }

  foreach ($signup->settings['mergefields'] as $tag => $mergevar) {
    if (!empty($mergevar)) {
      $form['mergevars'][$tag] = mailchimp_insert_drupal_form_tag($mergevar);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t($signup->settings['submit_button']),
  );

  return $form;
}

/**
 * Convert mailchimp form elements to Drupal Form API.
 *
 * @param <mailchimp_form_element> $mergevar
 *   The mailchimp-formatted form element to convert.
 *
 * @return <drupal_form_element>
 *   A properly formatted drupal form element.
 */
      }


      }
      else {
  }
}
