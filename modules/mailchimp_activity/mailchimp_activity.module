<?php

/**
 * Implements hook_entity_info().
 */
function mailchimp_activity_entity_info() {
  $return = array(
    'mailchimp_activity_entity' => array(
      'label' => t('MailChimp Activity Entity'),
      'controller class' => 'EntityAPIControllerExportable',
      'entity class' => 'MailchimpActivityEntity',
      'base table' => 'mailchimp_activity_entity',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'module' => 'mailchimp_activity',
      'entity keys' => array(
        'id' => 'mailchimp_activity_entity_id',
        'name' => 'name',
        'label' => 'label'
      ),
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/config/services/mailchimp/activity',
        'file' => 'mailchimp_activity.admin.inc',
      ),
      'label callback' => 'entity_class_label',
      'access callback' => 'mailchimp_activity_entity_access',
    ),
  );

  return $return;
}

/**
 * Access callback for mailchimp_activity_entity.
 *
 * @return bool
 */
function mailchimp_activity_entity_access() {
  return user_access('administer mailchimp activity');
}

/**
 * Implements hook_menu().
 */
function mailchimp_activity_menu() {
  $items = array();
  $mailchimp_activity_entities = mailchimp_activity_load_entities();
  foreach ($mailchimp_activity_entities as $mailchimp_activity_entity) {
    $items[$mailchimp_activity_entity->entity_type . '/%entity_object/mailchimp_activity'] = array(
      'title' => 'MailChimp Activity',
      'load arguments' => array($mailchimp_activity_entity->entity_type),
      'page callback' => 'mailchimp_activity_page',
      'page arguments' => array(1, $mailchimp_activity_entity),
      'access callback' => 'mailchimp_activity_access',
      'access arguments' => array($mailchimp_activity_entity),
      'type' => MENU_LOCAL_TASK,
    );
  }
/*  $items['admin/config/services/mailchimp/activity/add'] = array(
    'title' => 'Add an Activity Entity',
    'description' => 'Add an Entity to track Mailchimp activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchimp_activity_entity_form'),
    'access arguments' => array('administer mailchimp activity'),
    'file' => 'mailchimp_activity.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  */
  return $items;
}

/**
 * Access callback for activity menu items.
 *
 * @param MailchimpActivityEntity $mailchimp_activity_entity
 *
 * @return bool
 */
function mailchimp_activity_access(MailchimpActivityEntity $mailchimp_activity_entity) {
  if ($mailchimp_activity_entity->enabled && user_access('access mailchimp activity')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Loads a single mailchimp_activity_entity or all of them if no name provided.
 *
 * @param null $name
 *
 * @return array
 */
function mailchimp_activity_load_entities($name = NULL) {
  $types = entity_load_multiple_by_name('mailchimp_activity_entity', isset($name) ? array($name) : FALSE);
  return isset($name) ? reset($types) : $types;
}

/**
 * Get the MailChimp memberactivity for a given email address and list. Results
 * are cached in the cache_mailchimp_user bin which is cleared by the MC web
 * hooks system when needed.
 *
 * @param string $list_id
 * @param string $email
 * @param bool $reset
 *
 * @return array memberactivity
 *
 * @todo MC Web hook clearance needs review for this function's cache behavior
*/
function mailchimp_activity_get_member_activity($list_id, $email, $reset = FALSE) {
  $cache = $reset ? NULL : cache_get($list_id . '-' . $email . '-activity');
  $memberactivity = array();

  // return cached lists
  if ($cache) {
    $memberactivity = $cache->data;
  }
  // Query lists from the MC API and store in cache
  else {
    if ($q = mailchimp_get_api_object()) {
      $result = $q->listMemberActivity($list_id, array($email));
      if ($result['success']) {
        $memberactivity = reset($result['data']);
        cache_set(
          $list_id . '-' . $email . '-activity',
          $memberactivity,
          'cache',
          REQUEST_TIME + (60 * 60 * 24) // TODO: Any particular reason for this?
        // wanted to see how it worked, also thought this might be data that needed
        // more regular refreshing than the existing caching accounted for. This
        // will change for some entities every time an email is sent, which could
        // easily be daily.
        );
      }
    }
  }

  return $memberactivity;
}

/**
 * Content for the mailchimp log tab on entity instance pages.
 *
 * @param $entity
 * @param $mailchimp_activity_entity
 *
 * @return array (renderable)
 */
function mailchimp_activity_page($entity, MailchimpActivityEntity $mailchimp_activity_entity) {
  $wrapper = entity_metadata_wrapper($mailchimp_activity_entity->entity_type, $entity);
  // TODO: Handle multiple cardinality, E.g., RedHen Contact can have more than one email.
  $email = $wrapper->{$mailchimp_activity_entity->email_property}->value();
  while (is_array($email)) {
    $email = $email[0];
  }
  if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    return array('error_notice' => array(
        '#markup' => t('"' . $email . '" is not a valid email address. Unable to lookup MailChimp activity history without a valid email.'),
      ),
    );
  }
  $activity_array = mailchimp_activity_get_all_activity($email);
  //Now we flesh out the activity array with campaign data
  foreach ($activity_array as &$activity_ref) {
    $campaign_data = mailchimp_get_campaign_data($activity_ref['campaign_id']);
    $activity_ref['campaign_title'] = $campaign_data['title'];
    $activity_ref['campaign_id'] = $campaign_data['web_id'];
  }
  //We sort by list (alpha) and date (descending) before rendering
  usort($activity_array, '_mailchimp_activity_compare_activities_by_list_then_date');
  //Use the API object to figure out which mailchimp datacenter we are hosted at
  $mcapi = mailchimp_get_api_object();
  $datacenter = substr($mcapi->api_key, -3);
  $header = array(
    t('Campaign'),
    t('Action'),
    t('Date & Time'),
  );
  $colcount = count($header);
  $rows = array();
  $list = '';
  //Loop through all activities, creating rows for each
  foreach ($activity_array as $activity) {
    //if the List name has changed, insert a List Label row
    if ($list != $activity['list']) {
      $list = $activity['list'];
      $rows[] = array(
        'no_striping' => TRUE,
        'data' => array(
          array(
            'data' => '<strong>' . $list . '</strong>',
            'colspan' => $colcount,
            'style' => 'text-align:center',
          ),
        ),
      );
    }
    $rows[] = array(
      array(
        'data' => array(
          '#type' => 'link',
          '#title' => $activity['campaign_title'],
          '#href' => 'https://'. $datacenter .'.admin.mailchimp.com/campaigns/show?id=' . $activity['campaign_id'],
        ),
      ),
      array(
        'data' => $activity['action'],
      ),
      array(
        'data' => $activity['timestamp'],
      ),
    );
  }
  $display['mailchimp_activity'] =  array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );
  return $display;
}


/**
 * Return all activity on all lists for a given email address
 *
 * @param string $email
 *
 * @return $array
 */
function mailchimp_activity_get_all_activity($email) {
  $all_activity = array();

  $lists = mailchimp_get_lists_by_email($email);
  foreach ($lists as $list) {
    $list_activity = mailchimp_activity_get_member_activity($list['id'], $email);
    foreach ($list_activity as &$activity) {
      $activity['list'] = $list['name'];
    }
    $all_activity = array_merge($all_activity, $list_activity);
  }

  return $all_activity;
}

/**
 * Implements the cmp_function callback for usort. Sorts an array of
 * mailchimp activity arrays by date.
 *
 * @param $A
 * @param $B
 * @return int (just the difference between the two timestamps)
 */
function _mailchimp_activity_compare_activities_by_date($A, $B) {
  return strtotime($A['timestamp']) - strtotime($B['timestamp']);
}

/**
 * Implements the cmp_function callback for usort. Sorts an array of
 * mailchimp activity arrays by list name (alpha) and then by date (newest first).
 *
 * @param $A
 * @param $B
 * @return int
 */
function _mailchimp_activity_compare_activities_by_list_then_date($A, $B) {
  $listsort = strcmp($A['list'],$B['list']);
  if ($listsort) return $listsort;
  return $datesort = strtotime($B['timestamp']) - strtotime($A['timestamp']);
}

/**
 * Implements hook_permission().
 */
function mailchimp_activity_permission() {
  $return = array();

  $return['access mailchimp activity'] = array(
    'title' => t('Access MailChimp activity'),
    'description' => t('View MailChimp activity history'),
  );
  $return['administer mailchimp activity'] = array(
    'title' => t('Administer MailChimp activity entities'),
    'description' => t('Add, Delete, and Configure MailChimp Activity entity settings'),
  );
  return $return;
}
